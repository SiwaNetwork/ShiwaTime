package server

import (
	"fmt"
	"html/template"
	"net/http"
	"time"

	"github.com/shiwatime/shiwatime/internal/clock"
	"github.com/shiwatime/shiwatime/internal/protocols"
)

// WebData —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
type WebData struct {
	CurrentTime     string
	ClockState      string
	ClockStatus     string
	LastSync        string
	StabilityLevel  string
	StabilityPercent int
	
	ActiveSources   int
	TotalSources    int
	Sources         []SourceInfo
	
	Statistics      StatisticsInfo
}

// SourceInfo –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
type SourceInfo struct {
	Type          string
	Host          string
	Interface     string
	Device        string
	Status        string
	StatusText    string
	Offset        string
	Delay         string
	Quality       string
	
	// PTP specific
	PTPDomain     int
	PTPPortState  string
	PTPMaster     *PTPMasterInfo
	
	// PPS specific
	PPSMode       string
	PPSEventCount uint64
	PPSLastEvent  *PPSEventInfo
	
	// PHC specific
	PHCIndex      int
	PHCMaxAdj     int64
	PHCPPSAvail   bool
}

// PTPMasterInfo –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ PTP –º–∞—Å—Ç–µ—Ä–µ
type PTPMasterInfo struct {
	ClockIdentity string
	ClockClass    int
}

// PPSEventInfo –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ PPS —Å–æ–±—ã—Ç–∏–∏
type PPSEventInfo struct {
	Timestamp time.Time
}

// StatisticsInfo —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
type StatisticsInfo struct {
	MeanOffset     time.Duration
	MeanJitter     time.Duration
	AllanDeviation float64
	Correlation    float64
	FreqOffset     float64
	KernelSync     bool
	Stable         bool
	MaxOffset      time.Duration
	MinOffset      time.Duration
}

// webTemplate HTML template –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const webTemplate = `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ShiwaTime - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #333;
            min-height: 100vh;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            text-align: center;
            color: white;
            margin-bottom: 30px;
        }
        
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        
        .header .subtitle {
            font-size: 1.2em;
            opacity: 0.9;
        }
        
        .grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.2);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 40px rgba(0,0,0,0.15);
        }
        
        .card h2 {
            color: #4a5568;
            margin-bottom: 15px;
            font-size: 1.4em;
            border-bottom: 2px solid #e2e8f0;
            padding-bottom: 8px;
        }
        
        .status-indicator {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 8px;
        }
        
        .status-good { background-color: #48bb78; }
        .status-warning { background-color: #ed8936; }
        .status-error { background-color: #f56565; }
        .status-unknown { background-color: #a0aec0; }
        
        .metric {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 0;
            border-bottom: 1px solid #f1f5f9;
        }
        
        .metric:last-child {
            border-bottom: none;
        }
        
        .metric-label {
            font-weight: 500;
            color: #4a5568;
        }
        
        .metric-value {
            font-weight: 600;
            color: #2d3748;
            font-family: 'Courier New', monospace;
        }
        
        .time-display {
            text-align: center;
            font-size: 2em;
            font-weight: bold;
            color: #2b6cb0;
            margin: 15px 0;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
        }
        
        .sources-grid {
            display: grid;
            gap: 15px;
            margin-top: 15px;
        }
        
        .source-card {
            background: #f8fafc;
            border-radius: 10px;
            padding: 15px;
            border-left: 4px solid #4299e1;
        }
        
        .source-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }
        
        .source-type {
            font-weight: bold;
            color: #2b6cb0;
            text-transform: uppercase;
            font-size: 0.9em;
        }
        
        .protocol-badge {
            padding: 4px 8px;
            border-radius: 20px;
            font-size: 0.8em;
            font-weight: bold;
            text-transform: uppercase;
        }
        
        .protocol-ntp { background-color: #bee3f8; color: #2b6cb0; }
        .protocol-ptp { background-color: #c6f6d5; color: #22543d; }
        .protocol-pps { background-color: #fed7d7; color: #742a2a; }
        .protocol-phc { background-color: #faf5ff; color: #553c9a; }
        .protocol-nmea { background-color: #feebcb; color: #744210; }
        
        .advanced-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 10px;
            margin-top: 15px;
        }
        
        .stat-box {
            background: #f0f9ff;
            border: 1px solid #e0f2fe;
            border-radius: 8px;
            padding: 12px;
            text-align: center;
        }
        
        .stat-value {
            font-size: 1.2em;
            font-weight: bold;
            color: #0369a1;
        }
        
        .stat-label {
            font-size: 0.8em;
            color: #64748b;
            margin-top: 4px;
        }
        
        .protocol-details {
            background: #f0fdf4;
            border: 1px solid #dcfce7;
            border-radius: 8px;
            padding: 15px;
            margin-top: 10px;
        }
        
        .stability-indicator {
            display: flex;
            align-items: center;
            margin: 10px 0;
        }
        
        .stability-bar {
            flex-grow: 1;
            height: 8px;
            background: #e2e8f0;
            border-radius: 4px;
            margin: 0 10px;
            overflow: hidden;
        }
        
        .stability-fill {
            height: 100%;
            transition: width 0.3s ease;
        }
        
        .stability-good { background: linear-gradient(to right, #48bb78, #38a169); }
        .stability-warning { background: linear-gradient(to right, #ed8936, #dd6b20); }
        .stability-bad { background: linear-gradient(to right, #f56565, #e53e3e); }
        
        .auto-refresh {
            display: flex;
            align-items: center;
            justify-content: center;
            margin-top: 20px;
            color: white;
        }
        
        .auto-refresh input {
            margin-right: 10px;
        }
        
        @media (max-width: 768px) {
            .grid {
                grid-template-columns: 1fr;
            }
            
            .advanced-stats {
                grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            }
            
            .time-display {
                font-size: 1.5em;
            }
            
            .header h1 {
                font-size: 2em;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üïê ShiwaTime</h1>
            <div class="subtitle">–°–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏</div>
        </div>
        
        <div class="grid">
            <!-- –°–∏—Å—Ç–µ–º–Ω–æ–µ –≤—Ä–µ–º—è -->
            <div class="card">
                <h2>üïí –°–∏—Å—Ç–µ–º–Ω–æ–µ –≤—Ä–µ–º—è</h2>
                <div class="time-display" id="current-time">{{.CurrentTime}}</div>
                <div class="metric">
                    <span class="metric-label">–°–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Å–æ–≤</span>
                    <span class="metric-value">
                        <span class="status-indicator status-{{.ClockStatus}}"></span>
                        {{.ClockState}}
                    </span>
                </div>
                <div class="metric">
                    <span class="metric-label">–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è</span>
                    <span class="metric-value">{{.LastSync}}</span>
                </div>
                <div class="stability-indicator">
                    <span class="metric-label">–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å</span>
                    <div class="stability-bar">
                        <div class="stability-fill stability-{{.StabilityLevel}}" style="width: {{.StabilityPercent}}%"></div>
                    </div>
                    <span class="metric-value">{{.StabilityPercent}}%</span>
                </div>
            </div>
            
            <!-- –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ -->
            <div class="card">
                <h2>üì° –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏</h2>
                <div class="metric">
                    <span class="metric-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤</span>
                    <span class="metric-value">{{.ActiveSources}} / {{.TotalSources}}</span>
                </div>
                <div class="sources-grid">
                    {{range .Sources}}
                    <div class="source-card">
                        <div class="source-header">
                            <span class="source-type">{{.Type}}</span>
                            <span class="protocol-badge protocol-{{.Type}}">{{.Type}}</span>
                        </div>
                        <div class="metric">
                            <span class="metric-label">–°—Ç–∞—Ç—É—Å</span>
                            <span class="metric-value">
                                <span class="status-indicator status-{{.Status}}"></span>
                                {{.StatusText}}
                            </span>
                        </div>
                        {{if .Host}}
                        <div class="metric">
                            <span class="metric-label">–•–æ—Å—Ç</span>
                            <span class="metric-value">{{.Host}}</span>
                        </div>
                        {{end}}
                        {{if .Interface}}
                        <div class="metric">
                            <span class="metric-label">–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å</span>
                            <span class="metric-value">{{.Interface}}</span>
                        </div>
                        {{end}}
                        {{if .Device}}
                        <div class="metric">
                            <span class="metric-label">–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</span>
                            <span class="metric-value">{{.Device}}</span>
                        </div>
                        {{end}}
                        <div class="metric">
                            <span class="metric-label">–°–º–µ—â–µ–Ω–∏–µ</span>
                            <span class="metric-value">{{.Offset}}</span>
                        </div>
                        <div class="metric">
                            <span class="metric-label">–ó–∞–¥–µ—Ä–∂–∫–∞</span>
                            <span class="metric-value">{{.Delay}}</span>
                        </div>
                        <div class="metric">
                            <span class="metric-label">–ö–∞—á–µ—Å—Ç–≤–æ</span>
                            <span class="metric-value">{{.Quality}}</span>
                        </div>
                        
                        <!-- –ü—Ä–æ—Ç–æ–∫–æ–ª-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
                        {{if eq .Type "ptp"}}
                        <div class="protocol-details">
                            <div class="metric">
                                <span class="metric-label">PTP –î–æ–º–µ–Ω</span>
                                <span class="metric-value">{{.PTPDomain}}</span>
                            </div>
                            <div class="metric">
                                <span class="metric-label">–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ä—Ç–∞</span>
                                <span class="metric-value">{{.PTPPortState}}</span>
                            </div>
                            {{if .PTPMaster}}
                            <div class="metric">
                                <span class="metric-label">Master ID</span>
                                <span class="metric-value">{{.PTPMaster.ClockIdentity}}</span>
                            </div>
                            <div class="metric">
                                <span class="metric-label">Clock Class</span>
                                <span class="metric-value">{{.PTPMaster.ClockClass}}</span>
                            </div>
                            {{end}}
                        </div>
                        {{else if eq .Type "pps"}}
                        <div class="protocol-details">
                            <div class="metric">
                                <span class="metric-label">–†–µ–∂–∏–º —Å–∏–≥–Ω–∞–ª–∞</span>
                                <span class="metric-value">{{.PPSMode}}</span>
                            </div>
                            <div class="metric">
                                <span class="metric-label">–°–æ–±—ã—Ç–∏–π</span>
                                <span class="metric-value">{{.PPSEventCount}}</span>
                            </div>
                            {{if .PPSLastEvent}}
                            <div class="metric">
                                <span class="metric-label">–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ</span>
                                <span class="metric-value">{{.PPSLastEvent.Timestamp.Format "15:04:05"}}</span>
                            </div>
                            {{end}}
                        </div>
                        {{else if eq .Type "phc"}}
                        <div class="protocol-details">
                            <div class="metric">
                                <span class="metric-label">PHC –ò–Ω–¥–µ–∫—Å</span>
                                <span class="metric-value">{{.PHCIndex}}</span>
                            </div>
                            <div class="metric">
                                <span class="metric-label">Max Adj</span>
                                <span class="metric-value">{{.PHCMaxAdj}} ppb</span>
                            </div>
                            <div class="metric">
                                <span class="metric-label">PPS –¥–æ—Å—Ç—É–ø–µ–Ω</span>
                                <span class="metric-value">{{if .PHCPPSAvail}}–î–∞{{else}}–ù–µ—Ç{{end}}</span>
                            </div>
                        </div>
                        {{end}}
                    </div>
                    {{end}}
                </div>
            </div>
            
            <!-- –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
            <div class="card">
                <h2>üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
                <div class="advanced-stats">
                    <div class="stat-box">
                        <div class="stat-value">{{.Statistics.MeanOffset}}</div>
                        <div class="stat-label">–°—Ä–µ–¥–Ω–µ–µ —Å–º–µ—â–µ–Ω–∏–µ</div>
                    </div>
                                         <div class="stat-box">
                         <div class="stat-value">{{.Statistics.MaxOffset}}</div>
                         <div class="stat-label">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ</div>
                     </div>
                    <div class="stat-box">
                        <div class="stat-value">{{.Statistics.MeanJitter}}</div>
                        <div class="stat-label">–°—Ä–µ–¥–Ω–∏–π –¥–∂–∏—Ç—Ç–µ—Ä</div>
                    </div>
                    <div class="stat-box">
                        <div class="stat-value">{{printf "%.2e" .Statistics.AllanDeviation}}</div>
                        <div class="stat-label">Allan Deviation</div>
                    </div>
                    <div class="stat-box">
                        <div class="stat-value">{{printf "%.3f" .Statistics.Correlation}}</div>
                        <div class="stat-label">–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è</div>
                    </div>
                    <div class="stat-box">
                        <div class="stat-value">{{printf "%.1f" .Statistics.FreqOffset}}</div>
                        <div class="stat-label">–ß–∞—Å—Ç–æ—Ç–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ (ppb)</div>
                    </div>
                </div>
                
                <div class="metric">
                    <span class="metric-label">–Ø–¥–µ—Ä–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è</span>
                    <span class="metric-value">{{if .Statistics.KernelSync}}–í–∫–ª—é—á–µ–Ω–∞{{else}}–û—Ç–∫–ª—é—á–µ–Ω–∞{{end}}</span>
                </div>
                <div class="metric">
                    <span class="metric-label">–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —á–∞—Å–æ–≤</span>
                    <span class="metric-value">
                        <span class="status-indicator status-{{if .Statistics.Stable}}good{{else}}warning{{end}}"></span>
                        {{if .Statistics.Stable}}–°—Ç–∞–±–∏–ª—å–Ω—ã–µ{{else}}–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ{{end}}
                    </span>
                </div>
                <div class="metric">
                    <span class="metric-label">–î–∏–∞–ø–∞–∑–æ–Ω —Å–º–µ—â–µ–Ω–∏–π</span>
                    <span class="metric-value">{{.Statistics.MinOffset}} - {{.Statistics.MaxOffset}}</span>
                </div>
            </div>
        </div>
        
        <div class="auto-refresh">
            <input type="checkbox" id="auto-refresh" checked>
            <label for="auto-refresh">–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (10 —Å–µ–∫)</label>
        </div>
    </div>
    
    <script>
        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        let autoRefreshInterval;
        
        function toggleAutoRefresh() {
            const checkbox = document.getElementById('auto-refresh');
            if (checkbox.checked) {
                autoRefreshInterval = setInterval(() => {
                    location.reload();
                }, 10000);
            } else {
                clearInterval(autoRefreshInterval);
            }
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        function updateTime() {
            const timeElement = document.getElementById('current-time');
            if (timeElement) {
                const now = new Date();
                timeElement.textContent = now.toLocaleTimeString('ru-RU', {
                    hour12: false,
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit'
                });
            }
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        document.addEventListener('DOMContentLoaded', function() {
            toggleAutoRefresh();
            setInterval(updateTime, 1000);
            updateTime();
            
            document.getElementById('auto-refresh').addEventListener('change', toggleAutoRefresh);
        });
    </script>
</body>
</html>
`

// WebHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
type WebHandler struct {
	template     *template.Template
	clockManager *clock.Manager
}

// NewWebHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –≤–µ–±-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
func NewWebHandler(clockManager *clock.Manager) (*WebHandler, error) {
	tmpl, err := template.New("web").Parse(webTemplate)
	if err != nil {
		return nil, fmt.Errorf("failed to parse web template: %w", err)
	}

	return &WebHandler{
		template:     tmpl,
		clockManager: clockManager,
	}, nil
}

// ServeHTTP –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å—ã
func (h *WebHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	data := h.buildWebData()
	
	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	err := h.template.Execute(w, data)
	if err != nil {
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
	}
}

// buildWebData —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
func (h *WebHandler) buildWebData() WebData {
	now := time.Now()
	
	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Å–æ–≤
	stats := h.clockManager.GetStatistics()
	
	// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
	sources := h.buildSourcesInfo()
	
	// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
	activeSources := 0
	for _, source := range sources {
		if source.Status == "good" {
			activeSources++
		}
	}
	
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
	stabilityLevel := "bad"
	stabilityPercent := 0
	if stats.Stable {
		stabilityLevel = "good"
		stabilityPercent = 90
	} else if stats.AllanDeviation < 1e-6 {
		stabilityLevel = "warning"
		stabilityPercent = 60
	} else {
		stabilityPercent = 30
	}
	
	return WebData{
		CurrentTime:      now.Format("15:04:05"),
		ClockState:       stats.State.String(),
		ClockStatus:      h.getClockStatusClass(stats.State),
		LastSync:         "–Ω–µ–¥–∞–≤–Ω–æ", // TODO: –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
		StabilityLevel:   stabilityLevel,
		StabilityPercent: stabilityPercent,
		
		ActiveSources: activeSources,
		TotalSources:  len(sources),
		Sources:       sources,
		
		Statistics: StatisticsInfo{
			MeanOffset:     stats.MeanOffset,
			MeanJitter:     stats.MeanJitter,
			AllanDeviation: stats.AllanDeviation,
			Correlation:    0, // stats.Correlation not available
			FreqOffset:     stats.FreqOffset,
			KernelSync:     stats.KernelSync,
			Stable:         stats.Stable,
			MaxOffset:      stats.MaxOffset,
			MinOffset:      stats.MinOffset,
		},
	}
}

// buildSourcesInfo —Å–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö –≤—Ä–µ–º–µ–Ω–∏
func (h *WebHandler) buildSourcesInfo() []SourceInfo {
	sources := h.clockManager.GetSources()
	var sourceInfos []SourceInfo
	
	for _, handler := range sources {
		config := handler.GetConfig()
		status := handler.GetStatus()
		
		sourceInfo := SourceInfo{
			Type:       config.Type,
			Host:       config.Host,
			Interface:  config.Interface,
			Device:     config.Device,
			Status:     h.getSourceStatusClass(status),
			StatusText: h.getSourceStatusText(status),
		}
		
		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏
		timeInfo, err := handler.GetTimeInfo()
		if err == nil {
			sourceInfo.Offset = timeInfo.Offset.String()
			sourceInfo.Delay = timeInfo.Delay.String()
			sourceInfo.Quality = fmt.Sprintf("%d", timeInfo.Quality)
		} else {
			sourceInfo.Offset = "N/A"
			sourceInfo.Delay = "N/A"
			sourceInfo.Quality = "N/A"
		}
		
		// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
		h.addProtocolSpecificInfo(&sourceInfo, handler)
		
		sourceInfos = append(sourceInfos, sourceInfo)
	}
	
	return sourceInfos
}

// addProtocolSpecificInfo –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
func (h *WebHandler) addProtocolSpecificInfo(info *SourceInfo, handler protocols.TimeSourceHandler) {
	switch info.Type {
	case "ptp":
		// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å PTP-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
		if ptpHandler, ok := handler.(protocols.PTPHandler); ok {
			info.PTPDomain = ptpHandler.GetDomain()
			info.PTPPortState = ptpHandler.GetPortState().String()
			
			if masterInfo := ptpHandler.GetMasterInfo(); masterInfo != nil {
				info.PTPMaster = &PTPMasterInfo{
					ClockIdentity: masterInfo.ClockIdentity,
					ClockClass:    masterInfo.ClockClass,
				}
			}
		}
		
	case "pps":
		// PPS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
		if ppsHandler, ok := handler.(protocols.PPSHandler); ok {
			info.PPSEventCount = ppsHandler.GetPulseCount()
			
			lastTime := ppsHandler.GetLastPulseTime()
			if !lastTime.IsZero() {
				info.PPSLastEvent = &PPSEventInfo{
					Timestamp: lastTime,
				}
			}
		}
		
	case "phc":
		// PHC –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å PHCHandler –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
		// TODO: –î–æ–±–∞–≤–∏—Ç—å PHCHandler interface –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è PHC-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
	}
}

// getClockStatusClass –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç CSS –∫–ª–∞—Å—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Å–æ–≤
func (h *WebHandler) getClockStatusClass(state clock.ClockState) string {
	switch state {
	case clock.ClockStateSynchronized:
		return "good"
	case clock.ClockStateSynchronizing:
		return "warning"
	case clock.ClockStateHoldover:
		return "warning"
	case clock.ClockStateUnsynchronized:
		return "error"
	default:
		return "unknown"
	}
}

// getSourceStatusClass –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç CSS –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
func (h *WebHandler) getSourceStatusClass(status protocols.ConnectionStatus) string {
	if !status.Connected {
		return "error"
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
	if time.Since(status.LastActivity) > 30*time.Second {
		return "warning"
	}
	
	if status.LastError != nil {
		return "warning"
	}
	
	return "good"
}

// getSourceStatusText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
func (h *WebHandler) getSourceStatusText(status protocols.ConnectionStatus) string {
	if !status.Connected {
		return "–û—Ç–∫–ª—é—á–µ–Ω"
	}
	
	if status.LastError != nil {
		return "–û—à–∏–±–∫–∞"
	}
	
	if time.Since(status.LastActivity) > 30*time.Second {
		return "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
	}
	
	return "–ê–∫—Ç–∏–≤–µ–Ω"
}